Description: Windows/Linux AMI Lookup Helper
Parameters:
  LookupLatestWindowsServerAmi:
    Type: String
    Description: ''
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
  LookupLatestCentosAmi:
    Type: String
    Description: ''
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
Conditions:
  ShouldLookupWin: !Equals
    - !Ref LookupLatestWindowsServerAmi
    - 'True'
  ShouldLookupCentos: !Equals
    - !Ref LookupLatestCentosAmi
    - 'True'
Resources:
  WinAMIInfo:
    Type: 'Custom::WinAMIInfo'
    Condition: ShouldLookupWin
    Properties:
      ServiceToken: !GetAtt
        - AMIInfoFunction
        - Arn
      Region: !Ref 'AWS::Region'
      OSName: Windows Server 2019 English 64-bit
  CentosAMIInfo:
    Type: 'Custom::CentosAMIInfo'
    Condition: ShouldLookupCentos
    Properties:
      ServiceToken: !GetAtt
        - AMIInfoFunction
        - Arn
      Region: !Ref 'AWS::Region'
      OSName: CentOS 7.4 Latest
  AMIInfoFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join
          - |+

          - - // Map display OS names to AMI name patterns
            - 'var osNameToPattern = {'
            - '  ''Windows Server 2019 English 64-bit'': ''Windows_Server-2019*English*Full*Base*'','
            - '   ''CentOS 7.4 Latest'': ''CentOS-7*x86_64*'''
            - '};'
            - // Map display OS names to owner
            - 'var osNameToFilterData = {'
            - '  ''Windows Server 2019 English 64-bit'': {'
            - '                                            ''owner'': ''amazon'', '
            - '                                            ''filterValue'': ''801119661308'', // amazon web services'
            - '                                            ''filterName'': ''owner-id'' // amazon web services'
            - '                                            },'
            - '  ''CentOS 7.4 Latest'': {'
            - '                        ''owner'': ''aws-marketplace'', '
            - '                        ''filterName'': ''product-code'','
            - '                        ''filterValue'': ''cvugziknvmxgqna9noibqnnsy'','
            - '                        }'
            - '};'
            - var aws = require('aws-sdk');
            - 'exports.handler = function(event, context) {'
            - '  console.log(''REQUEST RECEIVED:\n'' + JSON.stringify(event));'
            - '  // For Delete requests, immediately send a SUCCESS response'
            - '  if (event.RequestType == ''Delete'') {'
            - '    sendResponse(event, context, ''SUCCESS'');'
            - '    return;'
            - '  }'
            - '  var responseStatus = ''FAILED'';'
            - '  var responseData = {};'
            - '  var osBaseName = osNameToPattern[event.ResourceProperties.OSName];'
            - '  var osOwner = osNameToFilterData[event.ResourceProperties.OSName][''owner''];'
            - '  var filterValue = osNameToFilterData[event.ResourceProperties.OSName][''filterValue''];'
            - '  var filterName = osNameToFilterData[event.ResourceProperties.OSName][''filterName''];'
            - '  console.log(''OS: '' + event.ResourceProperties.OSName + '' -> '' + osBaseName + '' owned by: '' + osOwner + '' '' + filterName+ '' '' + filterValue);'
            - '  var ec2 = new aws.EC2({region: event.ResourceProperties.Region});'
            - '  var describeImagesParams = {'
            - '    Filters: ['
            - '    { Name: filterName, Values: [filterValue]},'
            - '    { Name: ''name'', Values: [osBaseName]}],'
            - '    Owners: [osOwner]'
            - '  };'
            - '  console.log(''Calling describeImages...'');'
            - '  ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {'
            - '    if (err) {'
            - '      responseData = {Error: ''DescribeImages call failed''};'
            - '      console.log(responseData.Error + '':\n'', err);'
            - '    }'
            - '    else {'
            - '      console.log(''Got a response back from the server'');'
            - '      var images = describeImagesResult.Images;'
            - '      console.log(''Got '' + images.length + '' images back'');'
            - '      images.sort(function(x,y){ return x.CreationDate < y.CreationDate; });'
            - '      responseData[''Id''] = images[0].ImageId;'
            - '      responseData[''Name''] = images[0].Name;'
            - '      responseStatus = ''SUCCESS'';'
            - '      console.log(''Found: '' + images[0].Name + '
            - ' + images[0].ImageId);'
            - '    }'
            - '    sendResponse(event, context, responseStatus, responseData);'
            - '  });'
            - '};'
            - >-
              function sendResponse(event, context, responseStatus,
              responseData) {
            - '  var responseBody = JSON.stringify({'
            - '    Status: responseStatus,'
            - '    Reason: ''See the details in CloudWatch Log Stream: '' + context.logStreamName,'
            - '    PhysicalResourceId: context.logStreamName,'
            - '    StackId: event.StackId,'
            - '    RequestId: event.RequestId,'
            - '    LogicalResourceId: event.LogicalResourceId,'
            - '    Data: responseData'
            - '  });'
            - '  console.log(''RESPONSE BODY:\n'', responseBody);'
            - '  var https = require(''https'');'
            - '  var url = require(''url'');'
            - '  var parsedUrl = url.parse(event.ResponseURL);'
            - '  var options = {'
            - '    hostname: parsedUrl.hostname,'
            - '    port: 443,'
            - '    path: parsedUrl.path,'
            - '    method: ''PUT'','
            - '    headers: {'
            - '      ''content-type'': '''','
            - '      ''content-length'': responseBody.length'
            - '    }'
            - '  };'
            - '  console.log(''SENDING RESPONSE...\n'');'
            - '  var request = https.request(options, function(response) {'
            - '    console.log(''STATUS: '' + response.statusCode);'
            - '    console.log(''HEADERS: '' + JSON.stringify(response.headers));'
            - '    // Tell AWS Lambda that the function execution is done'
            - '    context.done();'
            - '  });'
            - '  request.on(''error'', function(error) {'
            - '    console.log(''sendResponse Error:'' + error);'
            - '    context.done();'
            - '  });'
            - '  // write data to request body'
            - '  request.write(responseBody);'
            - '  request.end();'
            - '}'
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: '180'
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeImages'
                Resource: '*'
Outputs:
  WindowsAMI:
    Description: Windows Server Latest AMI ID
    Value: !If
      - ShouldLookupWin
      - !GetAtt
        - WinAMIInfo
        - Id
      - 'NULL'
  CentosAMI:
    Description: Windows Server Latest AMI ID
    Value: !If
      - ShouldLookupCentos
      - !GetAtt
        - CentosAMIInfo
        - Id
      - 'NULL'
